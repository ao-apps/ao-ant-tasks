<?xml version="1.0" encoding="UTF-8"?>
<!--
ao-ant-tasks - Ant tasks used in building AO-supported projects.
Copyright (C) 2023  AO Industries, Inc.
    support@aoindustries.com
    7262 Bull Pen Cir
    Mobile, AL 36695

This file is part of ao-ant-tasks.

ao-ant-tasks is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ao-ant-tasks is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with ao-ant-tasks.  If not, see <https://www.gnu.org/licenses/>.
-->
<jsp:root
  xmlns:ao="https://oss.aoapps.com/taglib/"
  xmlns:core="https://semanticcms.com/core/taglib/"
  xmlns:jsp="http://java.sun.com/JSP/Page"
  xmlns:section="https://semanticcms.com/section/taglib/"
  version="2.1"
>
  <jsp:directive.page language="java" pageEncoding="UTF-8" />
  <jsp:directive.page session="false" />
  <core:page
    title="@{documented.name}"
    description="@{documented.description}"
    datePublished="2023-09-05T02:34:47Z"
    dateModified="2023-09-20T00:18:05Z"
  >
    <core:child page="changelog.jspx" />
    <core:child page="apidocs/index.jspx" />
    <header>
      <ao:include
        page="/ao-badges/badges.inc.jspx"
        arg.projectStatus="current-stable"
        arg.managementStatus="production"
        arg.packagingStatus="active"
        arg.javaseVersion="@{documented.javase.version}"
        arg.semanticVersioning="2.0.0"
        arg.license="lgpl-3.0"
        arg.scmUrl="@{project.scm.url}"
        arg.githubBuildWorkflow="Build"
        arg.mavenBadge="maven-central"
        arg.groupId="@{project.groupId}"
        arg.artifactId="@{documented.artifactId}"
        arg.sonarQualityGate="true"
        arg.sonarLinesOfCode="true"
        arg.sonarReliability="true"
        arg.sonarSecurity="true"
        arg.sonarMaintainability="true"
        arg.sonarCoverage="true"
      />
    </header>
    <p>
      @{documented.description}
    </p>
    <section:nav label="Project Links">
      <ul>
        <li><core:link page="index.jspx">Project Home</core:link></li>
        <li><core:link page="changelog.jspx">Changelog</core:link></li>
        <li><core:link page="apidocs/index.jspx">API Docs</core:link></li>
        <li><ao:a href="https://central.sonatype.com/artifact/${ao:encodeURIComponent('@{project.groupId}')}/${ao:encodeURIComponent('@{documented.artifactId}')}">Maven Central Repository</ao:a></li>
        <li><ao:a href="@{project.scm.url}">GitHub</ao:a></li>
      </ul>
    </section:nav>
    <section:section label="Features">
      <ul>
        <li>Fine-grained management of last-modified times within <code>*.aar</code>, <code>*.jar</code>, <code>*.war</code>, and <code>*.zip</code> files for optimum reproducibility and publishability.</li>
        <li>Generate directory-only ZIP files with a reference timestamp to be able to manipulate ZIP file structure reproducibly while also not losing per-entry timestamps.</li>
        <li>SEO filter Javadocs: <ao:a href="https://developers.google.com/search/docs/crawling-indexing/consolidate-duplicate-urls">Canonical URLs</ao:a>, selective <code>rel="nofollow"</code>, and <ao:a href="https://www.sitemaps.org/">Sitemaps</ao:a>.</li>
      </ul>
    </section:section>
    <section:section label="Motivation">
      <p>
        Our immediate goal is to have efficient <ao:a href="https://www.sitemaps.org/">sitemaps</ao:a> for generated Javadocs.  The sitemaps
        must provide accurate last-modified timestamps for generated pages.  Our current implementation of
        <ao:a href="https://maven.apache.org/guides/mini/guide-reproducible-builds.html">reproducible builds</ao:a> is losing last-modified
        information.
      </p>
      <p>
        More broadly, we desire accurate last-modified times for all project resources deployed in <code>*.aar</code>, <code>*.jar</code>, <code>*.war</code>,
        and <code>*.zip</code> files.  This can have implications for
        <ao:a href="https://semanticcms.com/core/model/">web content modeling</ao:a>,
        <core:link book="/servlet-last-modified" page="/index.jspx">web resource caching</core:link>, and the resulting
        <ao:a href="https://semanticcms.com/core/sitemap/">sitemap generation</ao:a>.
      </p>
    </section:section>
    <section:section label="Standard Solutions and Related Deficiencies">
      <p>
        As a simple strategy to create reproducible builds, a typical starting point is to
        <ao:a href="https://maven.apache.org/guides/mini/guide-reproducible-builds.html">declare a timestamp in the <code>\${project.build.outputTimestamp}</code> property</ao:a>.
        This timestamp is then used for all entries in all resulting AAR/JAR/WAR/ZIP files.  Standard Maven plugins all use this
        value, and the <ao:a href="https://maven.apache.org/maven-release/maven-release-plugin/">Maven Release Plugin</ao:a> will update this
        value automatically during releases.
      </p>
      <p>
        This simple approach, however, introduces an issue when serving web content from the <code>/META-INF/resources</code> directory
        within JAR files (and a similar issue with the main content served directly from or expanded from the main WAR file).
        Specifically, in snapshot builds between releases, the JAR/WAR will be recreated with the same timestamp,
        thus being updated without the main web application and clients being aware of the change.
      </p>
      <p>
        One workaround is to modify this timestamp on each commit.  This concept can be automated through the use of
        <ao:a href="https://github.com/git-commit-id/git-commit-id-maven-plugin">git-commit-id-maven-plugin</ao:a>, which will use the timestamp
        of the last commit.  This ensures last modified times are updated, so nothing is cached too aggressively.  However, it
        now appears that <strong>all</strong> resources are modified on every commit.  This, in turn, can cause web crawlers to be directed
        toward many pages that have, in fact, not been updated.  When this is Javadoc-generated content, it can cause the
        crawler to take a while to find actual updated content, or even worse it could distract the crawler from more meaningful
        changes elsewhere in the site.
      </p>
    </section:section>
    <section:section label="Our Solution">
      <p>
        Leveraging the <ao:a href="https://ant.apache.org/">Apache Ant</ao:a> tasks provided by this project, our
        <ao:a href="https://www.jenkins.io/">Jenkins</ao:a> builds will now compare the AAR/JAR/WAR/ZIP files between the last successful build
        and the current build.  When the entry content is identical to the previous build, the entry will be modified in-place
        to have the same timestamp as the previous build.  Thus, modified times will be carried through from build to build so
        long as the content has not changed.  If the entry is new to a build, it will retain the timestamp resulting from
        <code>\${project.build.outputTimestamp}</code> as is already done.
      </p>
      <p>
        Our release builds do not use this optimization.  They use standard reproducible timestamps, typically derived from
        <code>\${git.commit.time}</code>.
      </p>
      <p>
        This is only an optimization to assist crawlers in identifying new content more efficiently.  We only publish content
        from our SNAPSHOT (or POST-SNAPSHOT) builds.  These snapshots are typically published by Jenkins (which will contain
        the patched modification times), but may also be published directly by developers (which will use standard reproducible
        timestamps).
      </p>
      <section:section label="Why Ant Tasks Instead of Maven Plugin?">
        <p>
          We have implemented this as <ao:a href="https://ant.apache.org/manual/tutorial-writing-tasks.html">Ant tasks</ao:a> instead of a
          <ao:a href="https://maven.apache.org/guides/plugin/guide-java-plugin-development.html">Maven plugin</ao:a> because the task is used to
          process its own artifacts.  While we use the tasks via
          <ao:a href="https://maven.apache.org/plugins/maven-antrun-plugin/">Apache Maven AntRun Plugin</ao:a>, the versatility of
          <ao:a href="https://ant.apache.org/manual/Tasks/taskdef.html">TaskDef Task</ao:a> allows us to pick-up the artifact of the current build
          on the classpath.
        </p>
      </section:section>
    </section:section>
    <section:aside label="Evaluated Alternatives">
      <ul>
        <li><ao:a href="https://maven.apache.org/guides/mini/guide-reproducible-builds.html">Maven reproducible builds</ao:a></li>
        <li><ao:a href="https://github.com/git-commit-id/git-commit-id-maven-plugin">git-commit-id-maven-plugin</ao:a></li>
      </ul>
    </section:aside>
  </core:page>
</jsp:root>
